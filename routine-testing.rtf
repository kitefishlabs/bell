{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf320
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 AndaleMono;\f2\fnil\fcharset0 Monaco;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs20 \cf2 ////// functions\cf0 \
\
( \cf2 // map to Dict of Dicts (sfile id, relid)\cf0 \
~mapBy_SF_relID = \{ \cf3 |metadata|\cf0 \
	\cf3 var\cf0  fileMap = \cf3 Dictionary\cf0 [];\
	(metadata.class == \cf3 Dictionary\cf0 []).if\
	\{\
		metadata.keys.asArray.do(\{ \cf3 |unit|\cf0  \
			\cf3 var\cf0  filenum = metadata[unit][1];\
			(fileMap[filenum] == \cf3 nil\cf0 ).if\
			\{\
				fileMap.add(filenum -> \cf3 Dictionary\cf0 [metadata[unit][2] -> metadata[unit]]);\
			\} \{\
				fileMap[filenum].add(metadata[unit][2] -> metadata[unit]);\
			\};\
		\});\
	\} \{	\
		metadata.do(\{ \cf3 |unit|\cf0  \
			\cf3 var\cf0  filenum = unit[1];\
			(fileMap[filenum] == \cf3 nil\cf0 ).if\
			\{\
				fileMap.add(filenum -> \cf3 Dictionary\cf0 [unit[2] -> unit]);\
			\} \{\
				fileMap[filenum].add(unit[2] -> unit);\
			\};\
		\});\
	\};\
	fileMap\
\};\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs22 \cf0 \
\cf2 ///////////////////////////\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs20 \cf3 Server\cf0 .default = \cf3 Server\cf0 .internal;\
s = \cf3 Server\cf0 .default.boot;\
~crps = \cf3 CorpusDB\cf0 .new(\cf4 "bells"\cf0 , s);\
\
\cf2 //~crps.importCorpusFromXML(s, "/Users/tms/dev/supercollider/drone.piece.0000/xml/ambiance2.xml")\cf0 \
~crps.importCorpusFromXML(s, \cf4 "/Users/tms/dev/supercollider/bells/xml/bells.xml"\cf0 )\
~metadata = ~crps.mapSoundFileUnitsToCorpusUnits;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs22 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs20 \cf2 // all units, mapped by sfile and rel ids (Dict of Dicts)\cf0 \
~mappedBySF_RelID = ~mapBy_SF_relID.value(~metadata);
\f1\fs22 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 // set busses and create synths (banks of 8)\cf0 \
~busses = \cf3 nil\cf0  ! 8;\
~busses = 8.collect(\{ \cf3 |n|\cf0 \
	(~busses[n] != \cf3 nil\cf0 ).if \{ ~busses[n].free \};\
	\cf3 Bus\cf0 .control(s,1)\
\});\
\
~samplers = \cf3 nil\cf0  ! 8;\
~samplers = 8.collect(\{ \cf3 |n|\cf0 \
	(~samplers[n] != \cf3 nil\cf0 ).if \{ ~samplers[n].free \};\
	\cf3 Synth\cf0 (\cf5 \\unitsamplerS\cf0 , [\cf5 \\busTrig\cf0 , ~busses[n]]);\
\});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs20 \cf2 // basic random order swapping\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs22 \cf2 //r = Routine \{ |sfid|\cf0 \
\cf2 //	~counter = 0;\cf0 \
\cf2 //	
\f0\fs20 ~theunits = ~mappedBySF_RelID[sfid].keys.asArray.sort;\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 //	~left = ~crps[\\sftable][~crps[\\sfmap][sfid]][\\bfrL];\cf0 \
\cf2 //	~right = ~crps[\\sftable][~crps[\\sfmap][sfid]][\\bfrR];
\f1\fs22 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 //	inf.do(\{
\f0\fs20 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 //		(0.25.coin == true).if\cf0 \
\cf2 //		\{\cf0 \
\cf2 //			~theunits = ~theunits.swap(~theunits.size.rand, ~theunits.size.rand);\cf0 \
\cf2 //			~theunits.postln;\cf0 \
\cf2 //		\};	\cf0 \
\cf2 //		~mappedBySF_RelID[sfid][~theunits[~counter]]
\f1\fs22 .yield;\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 //		~counter = (~counter + 1) % ~theunits.size;\cf0 \
\cf2 //	\}); \cf0 \
\cf2 //\};\cf0 \
\
\cf2 //~temp = ~crps[\\cutable][
\f0\fs20 ~mappedBySF_RelID[0].keys.asArray[10.rand]];
\f1\fs22 \cf0 \
 \
\cf2 // random external swap\cf0 \
r = \cf3 Routine\cf0  \{ \cf3 |sfid|\cf0 \
	\cf3 var\cf0  next;\
	~counter = 0;\
	
\f0\fs20 ~theunits = ~mappedBySF_RelID[
\f1\fs22 sfid
\f0\fs20 ].keys.asArray.sort;\
	~left = ~crps[\cf5 \\sftable\cf0 ][~crps[\cf5 \\sfmap\cf0 ][sfid]][\cf5 \\bfrL\cf0 ];\
	~right = ~crps[\cf5 \\sftable\cf0 ][~crps[\cf5 \\sfmap\cf0 ][sfid]][\cf5 \\bfrR\cf0 ];
\f1\fs22 \
	\cf3 inf\cf0 .do(\{
\f0\fs20 \
		(0.2.coin == \cf3 true\cf0 ).if\
		\{\
			\cf4 "random!"\cf0 .postln;\
			next = ~nntree[~mappedBySF_RelID[
\f1\fs22 0
\f0\fs20 ][~theunits[
\f1\fs22 (~counter + 1) % ~theunits.size
\f0\fs20 ]][0]];\
			(next != \cf3 nil\cf0 ).if\
			\{\
				~crps[\cf5 \\cutable\cf0 ][next.choose]
\f1\fs22 .yield;\
			\} \{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs20 \cf0 			~mappedBySF_RelID[sfid][~theunits[~counter]]
\f1\fs22 .yield;\
			\};
\f0\fs20 \
			\cf2 //~theunits.postln;\cf0 \
		\} \{	\
			~mappedBySF_RelID[sfid][~theunits[~counter]]
\f1\fs22 .yield;\
		\};\
			~counter = (~counter + 1) % ~theunits.size;\
	\}); \
\};\
\
~scnt = 0;\
p = \cf3 Routine\cf0  \{\
	\cf3 inf\cf0 .do (\{\
		~samplers[~scnt]
\f0\fs20 .set(
\f1\fs22 \cf5 \\bufNumL\cf0 , ~left, \cf5 \\bufNumR\cf0 , ~right, \cf5 \\attack\cf0 , 0.1, \cf5 \\release\cf0 , 0.1);\
		~samplers[~scnt].yield;\
		~scnt = (~scnt + 1) % 8;\
	\}); \
\};\
~bcnt = 0;\
t = \cf3 Routine\cf0  \{ \cf3 inf\cf0 .do (\{ ~busses[~bcnt].yield; ~bcnt = (~bcnt + 1) % 8; \}); \};\
~sfnum = 0;\
fork \{	\cf2 // each iteration of the loop plays the yielded segment, alternating players...\cf0 \
	loop \{\
		~temp = r.next(~sfnum);\
		(~temp != \cf3 nil\cf0 ).if\
		\{\
			p.value.set(\cf5 \\offset\cf0 , ~temp[3] * 0.001, \cf5 \\dur\cf0 , ~temp[4] * 0.001);\
			t.value.set(1);\
			[~temp[3], ~temp[4]].postln;\
			((~temp[4] * 0.001) - 0.1).wait;\
		\} \{\
			~sfnum = ~sfnum + 1;\
			\cf2 //start/restart another traversal...callback to metalevel agent?\cf0 \
		\};\
	\}\
\}; \cf2 // Pbind???\cf0 \
\
s.queryAllNodes\
s.scope(2)\
\
\
~search3 = \cf3 CorpusSearch\cf0 .new(~crps);\
~search3.buildTree(\cf3 nil\cf0 , [8,9,10,12,13,15,0], \cf3 true\cf0 , \cf3 true\cf0 );\
\
~nntree = \cf3 Dictionary\cf0 [];\
~search3
\f0\fs20 .normedTree.do(\{ \cf3 |node|\cf0 \
	\cf3 var\cf0  res;\
	[node.label, node.location].post; \cf4 ":"\cf0 .postln;\
	~nntree.add(node.label -> \cf3 List\cf0 []);\
	res = ~search3.findNNearest(node.location, 0.3, \cf3 true\cf0 , 5);\
	(res.size > 1).if\
	\{\
		res.do(\{ \cf3 |pair|\cf0 \
			(pair[0].asInteger != node.label.asInteger).if\
			\{\
				~nntree[node.label].add(pair[0].asInteger);\
				pair[0].post; \cf4 " "\cf0 .post;\
			\};\
		\});\
	\} \{\
		~nntree.add(node.label -> \cf3 nil\cf0 );\
		\cf3 nil\cf0 .post;\
	\};\
	\cf4 " "\cf0 .postln;	\
\});
\f1\fs22 \
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 // granular sampling...\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 (\
\cf2 // buffer for rise/decay shape - multiple of sr helps prevent clicks, i think.\cf0 \
~gwind.free;\
~gwind = \cf3 Buffer\cf0 .alloc(s, s.sampleRate * 0.2, 1);\
\pard\tx480\tx960\tx1440\tx1920\tx2400\tx2880\tx3360\tx3840\tx4320\tx4800\tx5280\tx5760\tx6240\tx6720\tx7200\tx7680\tx8160\tx8640\tx9120\tx9600\tx10080\tx10560\tx11040\tx11520\tx12000\tx12480\tx12960\tx13440\tx13920\tx14400\tx14880\tx15360\tx15840\tx16320\tx16800\tx17280\tx17760\tx18240\tx18720\tx19200\tx19680\tx20160\tx20640\tx21120\tx21600\tx22080\tx22560\tx23040\tx23520\tx24000\tx24480\tx24960\tx25440\tx25920\tx26400\tx26880\tx27360\tx27840\tx28320\tx28800\tx29280\tx29760\tx30240\tx30720\tx31200\tx31680\tx32160\tx32640\tx33120\tx33600\tx34080\tx34560\tx35040\tx35520\tx36000\tx36480\tx36960\tx37440\tx37920\tx38400\tx38880\tx39360\tx39840\tx40320\tx40800\tx41280\tx41760\tx42240\tx42720\tx43200\tx43680\tx44160\tx44640\tx45120\tx45600\tx46080\tx46560\tx47040\tx47520\tx48000\ql\qnatural
\cf0 ~tempsig = \cf3 Signal\cf0 .hanningWindow(s.sampleRate * 0.4); \cf2 // twice the size of our buffer, 'cause we only use 1/2\cf0 \
~temparr.plot = \cf3 Array\cf0 .fill(s.sampleRate * 0.2, \{\cf3 |i|\cf0  ~tempsig[i]\});\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 ~gwind.loadCollection(~temparr);\
\pard\tx480\tx960\tx1440\tx1920\tx2400\tx2880\tx3360\tx3840\tx4320\tx4800\tx5280\tx5760\tx6240\tx6720\tx7200\tx7680\tx8160\tx8640\tx9120\tx9600\tx10080\tx10560\tx11040\tx11520\tx12000\tx12480\tx12960\tx13440\tx13920\tx14400\tx14880\tx15360\tx15840\tx16320\tx16800\tx17280\tx17760\tx18240\tx18720\tx19200\tx19680\tx20160\tx20640\tx21120\tx21600\tx22080\tx22560\tx23040\tx23520\tx24000\tx24480\tx24960\tx25440\tx25920\tx26400\tx26880\tx27360\tx27840\tx28320\tx28800\tx29280\tx29760\tx30240\tx30720\tx31200\tx31680\tx32160\tx32640\tx33120\tx33600\tx34080\tx34560\tx35040\tx35520\tx36000\tx36480\tx36960\tx37440\tx37920\tx38400\tx38880\tx39360\tx39840\tx40320\tx40800\tx41280\tx41760\tx42240\tx42720\tx43200\tx43680\tx44160\tx44640\tx45120\tx45600\tx46080\tx46560\tx47040\tx47520\tx48000\ql\qnatural
\cf0 )\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 ~densBus = \cf3 Bus\cf0 .control(s,1);\
~revBus = \cf3 Bus\cf0 .audio(s,1);\
\
~grainMaker = \cf3 Synth\cf0 (\cf5 \\
\f0\fs20 granulator\cf0 , [\cf5 \\out\cf0 , ~revBus, \cf5 \\gbufNum\cf0 , 
\f1\fs22 ~left
\f0\fs20 .bufnum
\f1\fs22 , 
\f0\fs20 \cf5 \\gdens\cf0 , ~densBus, \cf5 \\gdurR\cf0 , 0.01, \cf5 \\gposR\cf0 , 0.5, \cf5 \\gpos\cf0 , 0, \cf5 \\gtransp\cf0 , 0 ,\cf5 \\gpan\cf0 , 0, 
\f1\fs22 \cf5 \\genv\cf0 , ~gwind.bufnum, \cf5 \\gramp\cf0 , 0.05]);\
\
~verb = \cf3 Synth\cf0 (\cf5 \\testVerb\cf0 , [\cf5 \\in\cf0 , 
\f0\fs20 ~revBus
\f1\fs22 , 
\f2\fs18 \cf5 \\roomsize\cf0 , 243, \cf5 \\revtime\cf0 , 1, \cf5 \\damping\cf0 , 0.1, \cf5 \\inputbw\cf0 , 0.34, \cf5 \\drylevel\cf0  -3, \cf5 \\earlylevel\cf0 , -11, \cf5 \\taillevel\cf0 , -9
\f1\fs22 ], s, \cf5 \\addToTail\cf0 );\
\
\cf2 //~gui.add(\\gposRSpec -> ControlSpec(0, ~left.duration, \\linear));\cf0 \
\
(\
~gui = \cf3 Dictionary\cf0 [\cf5 \\topWindow\cf0  -> \cf3 Window\cf0 (\cf4 "grain maker"\cf0 , \cf3 Rect\cf0 (100, 800, 400, 400))];\
\
~gui.add(\cf5 \\gdurRBox\cf0  -> \cf3 TextView\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 10, 50, 60, 20))\
	.string_(\cf4 "gdurR"\cf0 ));\
~gui.add(\cf5 \\gdurRSpec\cf0  -> \cf3 ControlSpec\cf0 (0, 1, \cf5 \\linear\cf0 , 0.001));\
~gui.add(\cf5 \\gdurRSlider\cf0  -> \cf3 Slider\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 70, 50, 200, 20))\
	.value_(0)\
	.action_(\{\cf3 |btn|\cf0 \
		~gui[\cf5 \\gdurRBox\cf0 ].string_(~gui[\cf5 \\gdurRSpec\cf0 ].map(btn.value).asString);\
		~grainMaker.set(\cf5 \\gdurR\cf0 , ~gui[\cf5 \\gdurRSpec\cf0 ].map(btn.value));\
	\}));\
~gui.add(\cf5 \\gdurRBox\cf0  -> \cf3 TextView\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 270, 50, 50, 20))\
	.string_(\cf4 "0"\cf0 ));\
\
~gui.add(\cf5 \\gposRBox\cf0  -> \cf3 TextView\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 10, 75, 60, 20))\
	.string_(\cf4 "gposR"\cf0 ));\
~gui.add(\cf5 \\gposRSpec\cf0  -> \cf3 ControlSpec\cf0 (0, 2, \cf5 \\linear\cf0 , 0.01));\
~gui.add(\cf5 \\gposRSlider\cf0  -> \cf3 Slider\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 70, 75, 200, 20))\
	.value_(0)\
	.action_(\{\cf3 |btn|\cf0 \
		~gui[\cf5 \\gposRBox\cf0 ].string_(~gui[\cf5 \\gposRSpec\cf0 ].map(btn.value).asString);\
		~grainMaker.set(\cf5 \\gposR\cf0 , ~gui[\cf5 \\gposRSpec\cf0 ].map(btn.value));\
	\}));\
~gui.add(\cf5 \\gposRBox\cf0  -> \cf3 TextView\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 270, 75, 50, 20))\
	.string_(\cf4 "0"\cf0 ));\
	\
~gui.add(\cf5 \\gdurBox\cf0  -> \cf3 TextView\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 10, 100, 60, 20))\
	.string_(\cf4 "gdur"\cf0 ));\
~gui.add(\cf5 \\gdurSpec\cf0  -> \cf3 ControlSpec\cf0 (0, 2, \cf5 \\linear\cf0 , 0.001));\
~gui.add(\cf5 \\gdurSlider\cf0  -> \cf3 Slider\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 70, 100, 200, 20))\
	.value_(0)\
	.action_(\{\cf3 |btn|\cf0 \
		~gui[\cf5 \\gdurBox\cf0 ].string_(~gui[\cf5 \\gdurSpec\cf0 ].map(btn.value).asString);\
		~grainMaker.set(\cf5 \\gdur\cf0 , ~gui[\cf5 \\gdurSpec\cf0 ].map(btn.value));\
	\}));\
~gui.add(\cf5 \\gdurBox\cf0  -> \cf3 TextView\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 270, 100, 50, 20))\
	.string_(\cf4 "0"\cf0 ));\
\
~gui.add(\cf5 \\grampBox\cf0  -> \cf3 TextView\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 10, 125, 60, 20))\
	.string_(\cf4 "gramp"\cf0 ));\
~gui.add(\cf5 \\grampSpec\cf0  -> \cf3 ControlSpec\cf0 (0.001, 0.5, \cf5 \\linear\cf0 , 0.001));\
~gui.add(\cf5 \\grampSlider\cf0  -> \cf3 Slider\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 70, 125, 200, 20))\
	.value_(0.05)\
	.action_(\{\cf3 |btn|\cf0 \
		~gui[\cf5 \\grampBox\cf0 ].string_(~gui[\cf5 \\grampSpec\cf0 ].map(btn.value).asString);\
		~grainMaker.set(\cf5 \\gramp\cf0 , ~gui[\cf5 \\grampSpec\cf0 ].map(btn.value));\
	\}));\
~gui.add(\cf5 \\grampBox\cf0  -> \cf3 TextView\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 270, 125, 50, 20))\
	.string_(\cf4 "0.05"\cf0 ));\
\
~gui.add(\cf5 \\gposLineBox\cf0  -> \cf3 TextView\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 10, 150, 60, 20))\
	.string_(\cf4 "gposLine"\cf0 ));\
~gui.add(\cf5 \\gposLineSpec\cf0  -> \cf3 ControlSpec\cf0 (0, 10, \cf5 \\linear\cf0 , 1));\
~gui.add(\cf5 \\gposLineSlider\cf0  -> \cf3 Slider\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 70, 150, 200, 20))\
	.value_(0)\
	.action_(\{\cf3 |btn|\cf0 \
		~gui[\cf5 \\gposLineBox\cf0 ].string_(~gui[\cf5 \\gposLineSpec\cf0 ].map(btn.value).asString);\
		~grainMaker.set(\cf5 \\gposLine\cf0 , ~gui[\cf5 \\gposLineSpec\cf0 ].map(btn.value));\
	\}));\
~gui.add(\cf5 \\gposLineBox\cf0  -> \cf3 TextView\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 270, 150, 50, 20))\
	.string_(\cf4 "0"\cf0 ));\
	\
~gui.add(\cf5 \\gposBox\cf0  -> \cf3 TextView\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 10, 175, 60, 20))\
	.string_(\cf4 "gpos"\cf0 ));\
~gui.add(\cf5 \\gposSpec\cf0  -> \cf3 ControlSpec\cf0 (0, ~left.duration, \cf5 \\linear\cf0 , 0.001));\
~gui.add(\cf5 \\gposSlider\cf0  -> \cf3 Slider\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 70, 175, 200, 20))\
	.value_(0)\
	.action_(\{\cf3 |btn|\cf0 \
		~gui[\cf5 \\gposBox\cf0 ].string_(~gui[\cf5 \\gposSpec\cf0 ].map(btn.value).asString);\
		~grainMaker.set(\cf5 \\gpos\cf0 , ~gui[\cf5 \\gposSpec\cf0 ].map(btn.value));\
	\}));\
~gui.add(\cf5 \\gposBox\cf0  -> \cf3 TextView\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 270, 175, 50, 20))\
	.string_(\cf4 "0"\cf0 ));\
	\
~gui.add(\cf5 \\gpanLineBox\cf0  -> \cf3 TextView\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 10, 200, 60, 20))\
	.string_(\cf4 "gpanLine"\cf0 ));\
~gui.add(\cf5 \\gpanLineSpec\cf0  -> \cf3 ControlSpec\cf0 (0, 10, \cf5 \\linear\cf0 , 1));\
~gui.add(\cf5 \\gpanLineSlider\cf0  -> \cf3 Slider\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 70, 200, 200, 20))\
	.value_(0)\
	.action_(\{\cf3 |btn|\cf0 \
		~gui[\cf5 \\gpanLineBox\cf0 ].string_(~gui[\cf5 \\gpanLineSpec\cf0 ].map(btn.value).asString);\
		~grainMaker.set(\cf5 \\gpanLine\cf0 , ~gui[\cf5 \\gpanLineSpec\cf0 ].map(btn.value));\
	\}));\
~gui.add(\cf5 \\gpanLineBox\cf0  -> \cf3 TextView\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 270, 200, 50, 20))\
	.string_(\cf4 "0"\cf0 ));\
	\
~gui.add(\cf5 \\gpanBox\cf0  -> \cf3 TextView\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 10, 225, 60, 20))\
	.string_(\cf4 "gpan"\cf0 ));\
~gui.add(\cf5 \\gpanSpec\cf0  -> \cf3 ControlSpec\cf0 (-1, 1, \cf5 \\linear\cf0 , 0.1));\
~gui.add(\cf5 \\gpanSlider\cf0  -> \cf3 Slider\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 70, 225, 200, 20))\
	.value_(0)\
	.action_(\{\cf3 |btn|\cf0 \
		~gui[\cf5 \\gpanBox\cf0 ].string_(~gui[\cf5 \\gpanSpec\cf0 ].map(btn.value).asString);\
		~grainMaker.set(\cf5 \\gpan\cf0 , ~gui[\cf5 \\gpanSpec\cf0 ].map(btn.value));\
	\}));\
~gui.add(\cf5 \\gpanBox\cf0  -> \cf3 TextView\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 270, 225, 50, 20))\
	.string_(\cf4 "0"\cf0 ));\
\
~gui.add(\cf5 \\densBusBox\cf0  -> \cf3 TextView\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 10, 250, 60, 20))\
	.string_(\cf4 "denBus"\cf0 ));\
~gui.add(\cf5 \\densBusSpec\cf0  -> \cf3 ControlSpec\cf0 (0, 48, \cf5 \\linear\cf0 , 1));\
~gui.add(\cf5 \\densBusSlider\cf0  -> \cf3 Slider\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 70, 250, 200, 20))\
	.value_(0)\
	.action_(\{\cf3 |btn|\cf0 \
		~gui[\cf5 \\densBusBox\cf0 ].string_(~gui[\cf5 \\densBusSpec\cf0 ].map(btn.value).asString);\
		~densBus.set(~gui[\cf5 \\densBusSpec\cf0 ].map(btn.value));\
	\}));\
~gui.add(\cf5 \\densBusBox\cf0  -> \cf3 TextView\cf0 (~gui[\cf5 \\topWindow\cf0 ], \cf3 Rect\cf0 ( 270, 250, 50, 20))\
	.string_(\cf4 "0"\cf0 ));\
\
\
~gui[\cf5 \\topWindow\cf0 ].front;\
)\
\
\
~grainMaker.set(\cf5 \\gdurR\cf0 , 0.02);\
~grainMaker.set(\cf5 \\gposR\cf0 , 0.02);\
~densBus.set(val);\
\
~grainMaker.set(\cf5 \\gposLine\cf0 , val);\
~grainMaker.set(\cf5 \\gpos\cf0 , val.min(~left.duration));\
~grainMaker.set(\cf5 \\gdur\cf0 , val);\
~grainMaker.set(\cf5 \\gramp\cf0 , val);\
\
~grainMaker.set(\cf5 \\gpanLine\cf0 , val);\
~grainMaker.set(\cf5 \\gpan\cf0 , val);\
\
\
~grainMaker.set(\cf5 \\gtransp\cf0 , 0.03);\
\cf2 // stop!\cf0 \
~densBus.set(
\f0\fs20 0
\f1\fs22 );\
\
~sfnum = 2;\
~temp = r.next(~sfnum);\
~total = ~left.duration;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs20 \cf0 \
~left = ~crps[\cf5 \\sftable\cf0 ][~crps[\cf5 \\sfmap\cf0 ][4]][\cf5 \\bfrL\cf0 ];
\f1\fs22 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 // spectral freezing\cf0 \
~sfile = ~left.duration;\
\cf2 // whole file\cf0 \
~localRec.free;\
\pard\pardeftab560\ql\qnatural
\cf0 ~localRec = \cf3 Buffer\cf0 .alloc(s, (~left.duration).calcPVRecSize(2048, 0.25), 1,\
	\{ \cf3 |bfr|\cf0 \
	\cf2 // record\cf0 \
		~frzRec = \cf3 Synth\cf0 .newPaused(\cf5 \\pvrec\cf0 , [\cf5 \\recBuf\cf0 , bfr, \cf5 \\sourceBuf\cf0 , ~left, \cf5 \\durRatio\cf0 , 1]);\
	\};\
);\
~frzRec.run;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 // unit-by-unit\cf0 \
~localRec.free;\
\pard\pardeftab560\ql\qnatural
\cf0 ~localRec = \cf3 Buffer\cf0 .alloc(s, (~temp[4] * 0.001).calcPVRecSize(2048, 0.25), 1,\
	\{ \cf3 |bfr|\cf0 \
	\cf2 // record\cf0 \
		~frzRec = \cf3 Synth\cf0 .newPaused(\cf5 \\pvrec\cf0 , [\cf5 \\recBuf\cf0 , bfr, \cf5 \\sourceBuf\cf0 , ~left, \cf5 \\durRatio\cf0 , (~temp[4] * 0.001) / ~total]);\
	\};\
);\
~frzRec.run;\
\cf2 // save to disc\cf0 \
\pard\pardeftab560\ql\qnatural

\f2\fs20 \cf0 ~localRec.write(\cf4 "buffer4.scpv"\cf0 , \cf4 "wav"\cf0 , \cf4 "float32"\cf0 );\
\pard\pardeftab560\ql\qnatural

\f1\fs22 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 // without reading .scpv files\cf0 \
\pard\pardeftab560\ql\qnatural
\cf0 ~localRec.plot;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 // play\cf0 \
~frzPlayer.free;	~frzPlayer = \cf3 Synth\cf0 (\cf5 \\pvplay\cf0 , [\cf5 \\pBuf\cf0 , ~localRec, \cf5 \\rate\cf0 , 0.05]);\
~frzPlayer.set(\cf5 \\rate\cf0 , 0.005);\
~frzPlayer.set(\cf5 \\rate\cf0 , 0.2);\
\
\cf2 // with pre-baked .scpv files + unit-based offset\cf0 \
~frzPlayer2.free;	~frzPlayer2 = \cf3 Synth\cf0 (\cf5 \\pvplay\cf0 , [\cf5 \\pBuf\cf0 , ~localRec, \cf5 \\rate\cf0 , 0.05, \cf5 \\offset\cf0 , (
\f2\fs18 ~temp[3] * 0.001
\f1\fs22 ).calcPVRecSize(2048, 0.25), \cf5 \\pan\cf0 , -1]);\
\cf2 // ~frzPlayer2.set(\\rate, 1);\cf0 \
\
~frzPlayer3.free;	~frzPlayer3 = \cf3 Synth\cf0 (\cf5 \\pvplay\cf0 , [\cf5 \\pBuf\cf0 , ~localRec, \cf5 \\rate\cf0 , 0.051, \cf5 \\offset\cf0 , (
\f2\fs18 ~temp[3] * 0.001
\f1\fs22 ).calcPVRecSize(2048, 0.25), \cf5 \\pan\cf0 , 1]);\
\cf2 // ~frzPlayer2.set(\\rate, 1);\cf0 \
\
\
\pard\pardeftab560\ql\qnatural
\cf0 0.383 * (1 / 0.05)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 ~savedSCPVs = [\cf3 Buffer\cf0 .read(s, \cf4 "/Users/tms/dev/supercollider/bells/fft/buffer0.scpv"\cf0 ), \cf3 Buffer\cf0 .read(s, \cf4 "/Users/tms/dev/supercollider/bells/fft/buffer1.scpv"\cf0 ), \cf3 Buffer\cf0 .read(s, \cf4 "/Users/tms/dev/supercollider/bells/fft/buffer2.scpv"\cf0 )];\
\pard\pardeftab560\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 ~init_players = \{ \cf3 |num|\cf0 \
	~freezers = \cf3 nil\cf0  ! num;\
	~freezers = num.collect(\{ \cf3 |n|\cf0 \
		(~freezers[n] != \cf3 nil\cf0 ).if \{ ~freezers[n].free \};\
		\cf3 Synth\cf0 .newPaused(\cf5 \\pvplay\cf0 , [\cf5 \\pBuf\cf0 , ~savedSCPVs[0], \cf5 \\rate\cf0 , 1, \cf5 \\offset\cf0 , 0, \cf5 \\pan\cf0 , 0]);\
	\});\
\};\
\pard\pardeftab560\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 // random external swap\cf0 \
r = \cf3 Routine\cf0  \{ \cf3 |sfid|\cf0 \
	\cf3 var\cf0  next;\
	~counter = 0;\
	
\f0\fs20 ~theunits = ~mappedBySF_RelID[
\f1\fs22 sfid
\f0\fs20 ].keys.asArray.sort;\
	~left = ~crps[\cf5 \\sftable\cf0 ][~crps[\cf5 \\sfmap\cf0 ][sfid]][\cf5 \\bfrL\cf0 ];\
	~right = ~crps[\cf5 \\sftable\cf0 ][~crps[\cf5 \\sfmap\cf0 ][sfid]][\cf5 \\bfrR\cf0 ];
\f1\fs22 \
	\cf3 inf\cf0 .do(\{
\f0\fs20 \
		(0.2.coin == \cf3 true\cf0 ).if\
		\{\
			\cf4 "random!"\cf0 .postln;\
			
\f1\fs22 ~counter.postln;
\f0\fs20 \
			next = ~nntree[~mappedBySF_RelID[
\f1\fs22 0
\f0\fs20 ][~theunits[
\f1\fs22 (~counter + 1) % ~theunits.size
\f0\fs20 ]][0]];\
			(next != \cf3 nil\cf0 ).if\
			\{\
				~crps[\cf5 \\cutable\cf0 ][next.choose]
\f1\fs22 .yield;\
			\} \{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs20 \cf0 			~mappedBySF_RelID[sfid][~theunits[~counter]]
\f1\fs22 .yield;\
			\};
\f0\fs20 \
			\cf2 //~theunits.postln;\cf0 \
		\} \{	\
			
\f1\fs22 ~counter.postln;
\f0\fs20 \
			~mappedBySF_RelID[sfid][~theunits[~counter]]
\f1\fs22 .yield;\
		\};\
			~counter = (~counter + 1) % ~theunits.size;\
	\}); \
\};\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 //~scnt = 0;\cf0 \
p = \cf3 Routine\cf0  \{\
	\cf3 var\cf0  scnt = 0;\
	\cf3 inf\cf0 .do (\{\
		~freezers[scnt]
\f0\fs20 .set(
\f1\fs22 \cf5 \\pBuf\cf0 , ~savedSCPVs[~sfnum]);\
		~freezers[scnt].yield;\
		scnt = (scnt + 1) % 8;\
	\}); \
\};\
\
~sfnum = 0;\
~foo = \cf3 true\cf0 ;\
fork \{	\cf2 // each iteration of the loop plays the yielded segment, alternating players...\cf0 \
	\cf3 var\cf0  old = \cf3 nil\cf0 , latest = \cf3 nil\cf0 , temp;\
	~init_players.value(8);\
	(~foo == \cf3 true\cf0 ).if\
	\{\
		loop \{\
			\
			temp = r.next(~sfnum);\
			(temp != \cf3 nil\cf0 ).if\
			\{\
				old = latest;	\cf2 // ~old is the synth that is about to fade out\cf0 \
				latest = p.value;\
				latest.set(\cf5 \\offset\cf0 , (temp[3] * 0.001).calcPVRecSize(2048, 0.25), \cf5 \\dur\cf0 , (temp[4] * 0.001) * (1 / 0.05));\
				(latest != \cf3 nil\cf0 ).if  \{ latest.run \};  \cf2 // start new\cf0 \
				[temp[3], temp[4]].postln;\
				0.1.wait;		\cf2 // fade old\cf0 \
				(old != \cf3 nil\cf0 ).if \{ old.run(\cf3 false\cf0 ) \};\
				(((temp[4] * 0.001) * (1 / 0.05)) - 0.2).wait;\
			\} \{\
				old = latest;	\cf2 // ~old is the synth that is about to fade out\cf0 \
				0.1.wait;\
				(old != \cf3 nil\cf0 ).if \{ old.run(\cf3 false\cf0 ) \};\
				~sfnum = ~sfnum + 1;\
				0.5.wait;\
				\cf2 //start/restart another traversal...callback to metalevel agent?\cf0 \
			\};\
		\};\
	\};\
\}; \cf2 // Pbind???\cf0 \
\pard\pardeftab560\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 ~foo = \cf3 false\cf0 ;\
\pard\pardeftab560\ql\qnatural
\cf0 \
\
\
\
\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\cf2 // spectral freezing2\cf0 \
~sfile = ~left;\
\pard\pardeftab560\li1700\fi-1700\ql\qnatural

\f0\fs20 \cf0 ~trackBuf = \cf3 Buffer\cf0 .alloc(s, 
\f1\fs22 (~left.duration * 0.25).calcPVRecSize(2048, 0.25) / 2048
\f0\fs20 , 1);
\f1\fs22 \
\pard\pardeftab560\ql\qnatural
\cf0 ~localRec2 = \cf3 Buffer\cf0 .alloc(s, (~left.duration * 0.25).calcPVRecSize(2048, 0.25));\
\cf2 // record\cf0 \
~frzRec = \cf3 Synth\cf0 (\cf5 \\pvrec2\cf0 , [\cf5 \\trackBuf\cf0 , ~trackBuf, \cf5 \\recBuf\cf0 , ~localRec2, \cf5 \\sourceBuf\cf0 , ~left, \cf5 \\durRatio\cf0 , 0.25]);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
~trackBuf.plot;\
\pard\pardeftab560\ql\qnatural
\cf0 ~localRec2.plot;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 // play\cf0 \
\pard\pardeftab560\ql\qnatural
\cf0 ~frzPlayer = \cf3 Synth\cf0 (\cf5 \\pvplay\cf0 , [\cf5 \\pBuf\cf0 , ~localRec, \cf5 \\rate\cf0 , 0.06]);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\
~iBus = \cf3 Bus\cf0 .audio(s,1);\
~rBus = \cf3 Bus\cf0 .control(s,1);\
~kbus = \cf3 Bus\cf0 .control(s,1);\
~ratecontrol = \cf3 Synth\cf0 (\cf5 \\ratecontrol\cf0 , [\cf5 \\ibus\cf0 , ~iBus, \cf5 \\rbus\cf0 , ~rBus, \cf5 \\kbus\cf0 , ~kBus, \cf5 \\trackBuf\cf0 , ~trackBuf]);\
~frzPlayer2 = \cf3 Synth\cf0 (\cf5 \\pvplay2\cf0 , [\cf5 \\pBuf\cf0 , ~localRec2, \cf5 \\ibus\cf0 , ~iBus, \cf5 \\rbus\cf0 , ~rBus, \cf5 \\kbus\cf0 , ~kBus], s, \cf5 \\addToTail\cf0 );\
\
\
~iBus.scope;\
\
\
\
\
\
\
(\
\pard\pardeftab560\ql\qnatural

\f2\fs18 \cf3 SynthDef\cf0 (\cf5 \\partialsynth\cf0 , \{\cf3 arg\cf0  inbus, fftbuf;\
	\cf3 var\cf0  in, chain, out;\
	in = \cf3 In\cf0 .ar(inbus,1);\
	chain = \cf3 FFT\cf0 (fftbuf, in);\
	\cf2 // resynhtesize according to MouseX. If 0, only sound with VERY stable changes of frequecy\cf0 \
	\cf2 // will be returned. Upper limit should be Nyqust / nBins , e.g. 22050 / 2048 -> 21.532\cf0 \
	\cf2 // or + and - 21.532\cf0 \
	chain = \cf3 PV_PartialSynthF\cf0 (chain, \cf3 MouseX\cf0 .kr(0, 21.532), 6, 0);\
	out = \cf3 IFFT\cf0 (chain);\
	\cf3 Out\cf0 .ar(0, out.dup); \
	\}).send(s);\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs20 \cf0 ~theunits = ~mappedBySF_RelID[6].keys.asArray.sort;\
~left = ~crps[\cf5 \\sftable\cf0 ][~crps[\cf5 \\sfmap\cf0 ][2]][\cf5 \\bfrL\cf0 ];
\f1\fs22 \
~fftbuf = \cf3 Buffer\cf0 .alloc(s, 2048);\
~tBus = \cf3 Bus\cf0 .control(s,1);\
~monoPlayer = \cf3 Synth\cf0 (\cf5 \\unitsamplerM\cf0 , [\cf5 \\busTrig\cf0 , ~tBus, \cf5 \\release\cf0 , 0.5, \cf5 \\bufNum\cf0 , ~left, \cf5 \\offset\cf0 , 0, \cf5 \\dur\cf0 , ~left.duration, \cf5 \\out\cf0 , ~revBus]);\
~psynth = \cf3 Synth\cf0 (\cf5 \\partialsynth\cf0 , [\cf5 \\inbus\cf0 , ~revBus, \cf5 \\fftbuf\cf0 , ~fftbuf], s, \cf5 \\addToTail\cf0 );
\f2\fs18 \
~tBus.set(1);}