{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf320
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green115\blue0;\red96\green96\blue96;
\red191\green0\blue0;}
\deftab560
\pard\pardeftab560\li1140\fi-1140\ql\qnatural

\f0\fs20 \cf0 (\
~newSoundFileUnitRow = \{ \cf2 |currfile, pid, parent, top, bot|\cf0 \
	\cf2 var\cf0  currSFU = ~crps[\cf3 \\sfutable\cf0 ][currfile];\
	[ \cf2 SCButton\cf0 .new(parent, \cf2 Rect\cf0 (0, (pid * 25), 22, 22))\
			.states_([[pid.asString, \cf2 Color\cf0 .blue, \cf2 Color\cf0 .white], [pid.asString, \cf2 Color\cf0 .white, \cf2 Color\cf0 .blue]])\
			.value_(0)\
			.mouseUpAction_(\{ \cf2 |bttn|\cf0 \
				~updateSFViews.value(currfile, top, bot, pid);\
				\cf2 Plotter\cf0 (parent: ~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\highlighter\cf0 ])\
					.value_(currSFU[\cf3 \\mfccs\cf0 ][pid][2..].ampdb)\
\pard\pardeftab560\ql\qnatural
\cf0 					.plotMode_(\cf3 \\plines\cf0 )\
					.findSpecs_(\cf2 true\cf0 );\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 			\}),\
		\cf2 SCButton\cf0 .new(parent, \cf2 Rect\cf0 (25, (pid * 25), 22, 22))\
			.states_([[\cf4 "X"\cf0 , \cf2 Color\cf0 .white, \cf2 Color\cf0 .red]])\
			.value_(0)\
			.mouseUpAction_(\{ \cf2 |num|\cf0  \cf2 AppClock\cf0 .sched(0, \{\cf2 |now|\cf0  ~deleteSoundFileUnit.value(pid, top, bot); \cf2 nil\cf0 \}) \}),\
		\cf2 SCButton\cf0 .new(parent, \cf2 Rect\cf0 (50, (pid * 25), 22, 22))\
			.states_([[\cf4 "P"\cf0 , \cf2 Color\cf0 .black, \cf2 Color\cf0 .green]])\
			.value_(0)\
			.mouseUpAction_(\{ ~playSegment.value([currfile, pid]) \}),\
\pard\pardeftab560\ql\qnatural
\cf0 		\cf2 SCNumberBox\cf0 .new(parent, \cf2 Rect\cf0 (75, (pid * 25), 60, 20))\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 			.value_(currSFU[\cf3 \\units\cf0 ][pid][3])\
			.action_(\{\cf2 |val|\cf0  \cf5 // "ONSET VAL: ".post; val.value.postln;\cf0 \
				~crps.updateSoundFileUnit(currfile, pid, \cf2 nil\cf0 , val.value.floor);\
				~crps.segmentUnits(currfile);\
				~updateSFViews.value(currfile, top, bot, pid);\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf5 //				~updateCurrentSoundFileUnit.value(pid,1);\cf0 \
				~gui[\cf3 \\soundFileUnitRowViews\cf0 ][pid][5].value_(currSFU[\cf3 \\units\cf0 ][pid][0..15].asString);\
			\}),\
		\cf2 SCNumberBox\cf0 .new(parent, \cf2 Rect\cf0 (140, (pid * 25), 60, 20))\
			.value_(currSFU[\cf3 \\units\cf0 ][pid][4])\
			.action_(\{\cf2 |val|\cf0  \cf5 // "DUR VAL: ".post; val.value.postln;\cf0 \
				~crps.updateSoundFileUnit(currfile, pid, \cf2 nil\cf0 , \cf2 nil\cf0 , val.value.ceil);\
				~crps.segmentUnits(currfile);\
				~updateSFViews.value(currfile, top, bot, pid);\
\cf5 //				~updateCurrentSoundFileUnit.value(pid,1);\cf0 \
				~gui[\cf3 \\soundFileUnitRowViews\cf0 ][pid][5].value_(currSFU[\cf3 \\units\cf0 ][pid][0..15].asString);\
			\}),\
		\cf2 SCTextField\cf0 .new(parent, \cf2 Rect\cf0 (205, (pid * 25), 700, 20))\
			.value_(currSFU[\cf3 \\units\cf0 ][pid][0..15].asString), \cf5 //((++ ~crps[\\sfutable][currfile][\\units][pid][5..15]).asString),\cf0 \
		pid.asInteger ];\
\};\
\
~updateSoundFileUnitRow = \{ \cf2 |rid, bot|\cf0 \
	~gui[\cf3 \\soundFileUnitRowViews\cf0 ][rid][3].value_(~crps[\cf3 \\sfutable\cf0 ][~gui[\cf3 \\cf\cf0 ]][\cf3 \\units\cf0 ][rid][3]); \cf5 ////!!!!!!!!!\cf0 \
	~gui[\cf3 \\soundFileUnitRowViews\cf0 ][rid][4].value_(~crps[\cf3 \\sfutable\cf0 ][~gui[\cf3 \\cf\cf0 ]][\cf3 \\units\cf0 ][rid][4]);\
	bot.setSelection(rid, [0, 0]);\
	bot.setSelection(rid, ~crps[\cf3 \\sfutable\cf0 ][~gui[\cf3 \\cf\cf0 ]][\cf3 \\units\cf0 ][rid][3..4] * 44.1);\
	\cf5 //"Row ".post; rid.post; " updated.".postln;\cf0 \
\};\
\
~updateSFViews = \{ \cf2 |cfpath, top, bot, currid|\cf0 \
	\cf2 var\cf0  theunits = ~crps[\cf3 \\sfutable\cf0 ][cfpath][\cf3 \\units\cf0 ];\
	theunits.postln;\
	\cf5 // clear Views\cf0 \
	(0..63).do(\{ \cf2 |i|\cf0  top.selectNone(i) \});\
	bot.selectNone(0);\
	\cf5 // read out units into the two views if they exist\cf0 \
	(theunits != \cf2 nil\cf0 ).if\
	\{\
		theunits.do(\{ \cf2 |row, index|\cf0  top.setSelection(index, [row[3], row[4]] * 44.1) \});\
		bot.setSelection(0, (theunits[currid][3..4] * 44.1));\
		\cf5 //unselect\cf0 \
		(~gui[\cf3 \\soundFileUnitRowViews\cf0 ][~gui[\cf3 \\cp\cf0 ]] != nil).if \{ ~gui[\cf3 \\soundFileUnitRowViews\cf0 ][~gui[\cf3 \\cp\cf0 ]][0].value_(0)\};\
		\cf5 //update\cf0 \
		~gui[\cf3 \\cp\cf0 ] = currid;\
		~gui[\cf3 \\soundFileUnitRowViews\cf0 ][~gui[\cf3 \\cp\cf0 ]][0].value_(0);\
		\cf5 //~updateCurrentSoundFileUnit.value(currid,1);\cf0 \
	\};\
\};\
\
~updateCurrentSoundFileUnit = \{ \cf2 |cpuid|\cf0 \
	\cf5 //unselect\cf0 \
	~gui[\cf3 \\soundFileUnitRowViews\cf0 ][~gui[\cf3 \\cp\cf0 ]][0].value_(0);\
	\cf5 //update\cf0 \
	~gui[\cf3 \\cp\cf0 ] = cpuid;\
	~gui[\cf3 \\soundFileUnitRowViews\cf0 ][~gui[\cf3 \\cp\cf0 ]][0].value_(0);\
\};\
\
~deleteSoundFileUnit = \{ \cf2 |did, top, bot|\cf0 \
	\cf2 var\cf0  range, num = ~gui[\cf3 \\soundFileUnitRowViews\cf0 ][did].pop;\
	~gui[\cf3 \\soundFileUnitRowViews\cf0 ][did].do(\{\cf2 |item|\cf0  item.remove; item.free \});\
	top.setSelection(~gui[\cf3 \\cp\cf0 ], [0, 0]);\
	top.setSelection((~gui[\cf3 \\soundFileUnitRowViews\cf0 ].size - 1), [0, 0]);\
	bot.setSelection(0, [0, 0]);\
	~gui[\cf3 \\soundFileUnitRowViews\cf0 ].add(did->\cf2 nil\cf0 );\
	~graphNeedsUpdate = \cf2 true\cf0 ;\
	\
	range = ~crps.removeSoundFileUnit(~gui[\cf3 \\cf\cf0 ], did);\
\cf5 //	"Popping this provisional unit: ".post; num.postln;\cf0 \
\cf5 //	"Range: ".post;	range.postln;\cf0 \
	(range != \cf2 nil\cf0 ).if\
	\{	\
		range.do(\{ \cf2 |rv|\cf0 \
			\cf2 var\cf0  waveformArea = ~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\waveform\cf0 ];\
			\cf2 var\cf0  tmp = ~newSoundFileUnitRow.value(~gui[\cf3 \\cf\cf0 ], rv, ~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\segments\cf0 ][\cf3 \\view\cf0 ], waveformArea[\cf3 \\fullView\cf0 ], waveformArea[\cf3 \\closeView\cf0 ]); \cf5 // the data model has already been updated!!!!\cf0 \
			~gui[\cf3 \\soundFileUnitRowViews\cf0 ].add(rv -> tmp);\
			~gui[\cf3 \\soundFileUnitRowViews\cf0 ][rv + 1].pop;\
			~gui[\cf3 \\soundFileUnitRowViews\cf0 ][rv + 1].do(\{\cf2 |item|\cf0  item.remove; item.free \});\
			~gui[\cf3 \\soundFileUnitRowViews\cf0 ].add((rv + 1) -> \cf2 nil\cf0 );\
		\});\
	\};\
\
	(~gui[\cf3 \\soundFileUnitRowViews\cf0 ].size > 0).if\
	\{\
		~updateCurrentSoundFileUnit.value(~gui[\cf3 \\cp\cf0 ] % ~gui[\cf3 \\soundFileUnitRowViews\cf0 ].size);\
		(~gui[\cf3 \\cp\cf0 ]..(~gui[\cf3 \\soundFileUnitRowViews\cf0 ].size - 1)).do(\{ \cf2 |prow|\cf0 	\
			top.setSelection(prow, ~crps[\cf3 \\sfutable\cf0 ][~gui[\cf3 \\cf\cf0 ]][\cf3 \\units\cf0 ][prow][3..4] * 44.1);\
		\});\
		bot.setSelection(0, ~crps[\cf3 \\sfutable\cf0 ][~gui[\cf3 \\cf\cf0 ]][\cf3 \\units\cf0 ][~gui[\cf3 \\cp\cf0 ]][3..4] * 44.1);\
	\};\
	~crps.segmentUnits(~gui[\cf3 \\cf\cf0 ]);\
\};\
\
~buildGraphParams = \{ \cf2 |tabnum, xx, yy, ss, dragtarget = nil, fontcolor, initSelection|\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 	\cf2 var\cf0  descrids = \cf2 Array\cf0 [], selected;\
	\cf2 var\cf0  graph = ~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\areas\cf0 ][\cf3 \\graph\cf0 ], graphparams = ~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\areas\cf0 ][\cf3 \\graphParams\cf0 ];\
	\cf2 var\cf0  gpheight = graphparams[\cf3 \\view\cf0 ].bounds.height;\
\
	~crps[\cf3 \\dtable\cf0 ].keys.asArray.sort.do(\{ \cf2 |descr|\cf0  descrids = descrids.add(~crps[\cf3 \\dtable\cf0 ][descr].asString) \});\
	~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\xx\cf0 ] = ~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\xx\cf0 ] ? xx;\
	~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\yy\cf0 ] = ~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\yy\cf0 ] ? yy;\
	~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\ss\cf0 ] = ~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\ss\cf0 ] ? ss;\
	\
	~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\areas\cf0 ][\cf3 \\graphParams\cf0 ][\cf3 \\view\cf0 ].children.do(\{\cf2 |child|\cf0  child.remove; child.free \});\
	\cf4 "BUILDING GRAPH PARAMS!!!"\cf0 .postln;\
	\
	graph.sync;\
	graph.descriptors_(xx, yy, ss).fontColor_(fontcolor).dragTarget_(dragtarget).zoomFactor_(1@1).transFactor_(0@0);\
	graph.clients_([	\cf5 // unitData Viewer, player, MFCC plotter\cf0 \
		\{ \cf2 |chosen|\cf0  graphparams[\cf3 \\unitData\cf0 ].items_(~crps.getSoundFileUnitMetadata(chosen.state[0], chosen.state[1])[0..15].collect(\{\cf2 |elem|\cf0  elem.asString\})) \},	\cf5 // link scene to metadata view \cf0 \
		\{ \cf2 |chosen|\cf0  ~playSegment.value(chosen.state) \},\
		\{ \cf2 |chosen|\cf0 \
			\cf2 Plotter\cf0 (parent: ~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\areas\cf0 ][\cf3 \\highlighter\cf0 ])\
				.value_(~crps[\cf3 \\sfutable\cf0 ][ ~crps[\cf3 \\sfmap\cf0 ][chosen.state[0]] ][\cf3 \\mfccs\cf0 ][chosen.state[1]][2..].ampdb)\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 				.plotMode_(\cf3 \\plines\cf0 )\
\pard\pardeftab560\ql\qnatural
\cf0 				.findSpecs_(\cf2 true\cf0 );\
		\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 	]);\
	graph.highlight([0,0]);\
	\cf5 // the 4 columns: names, mins, currently selected unit, maxes\cf0 \
	graphparams[\cf3 \\minList\cf0 ].remove;\
	graphparams[\cf3 \\unitData\cf0 ].remove;\
	graphparams[\cf3 \\maxList\cf0 ].remove;\
	\
\cf5 //	~gui[\\tabs][1][\\areas][\\graph].cArray.postln;\cf0 \
	\
	graphparams.add(\cf3 \\dList\cf0  -> \cf2 SCListView\cf0 (graphparams[\cf3 \\view\cf0 ], \cf2 Rect\cf0 (0, 25, 80, gpheight - 25))\
			.stringColor_(\cf2 Color\cf0 .white).selectedStringColor_(\cf2 Color\cf0 .green)\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 			.items_(~crps[\cf3 \\dtable\cf0 ].keys.asArray.sort.collect(\{ \cf2 |descr|\cf0  ~crps[\cf3 \\dtable\cf0 ][descr].asString \})))\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 		.add(\cf3 \\minList\cf0  -> \cf2 SCListView\cf0 (graphparams[\cf3 \\view\cf0 ], \cf2 Rect\cf0 (85, 25, 80, gpheight - 25))\
			.stringColor_(\cf2 Color\cf0 .white).selectedStringColor_(\cf2 Color\cf0 .green)\
			.items_(~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\areas\cf0 ][\cf3 \\graph\cf0 ].cArray[0..15].collect(\{\cf2 |col|\cf0  col.minItem.asString \}))\
			.value_(~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\xx\cf0 ])\
			.action_(\{ \cf2 |selection|\cf0 \
				graph.descriptors_(selection.value.max(0).min(descrids.size),\
					~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\areas\cf0 ][\cf3 \\graphParams\cf0 ][\cf3 \\unitData\cf0 ].value,\
					~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\areas\cf0 ][\cf3 \\graphParams\cf0 ][\cf3 \\maxList\cf0 ].value\
				)\
			\}))\
		.add(\cf3 \\unitData\cf0  -> \cf2 SCListView\cf0 (graphparams[\cf3 \\view\cf0 ], \cf2 Rect\cf0 (170, 25, 80, gpheight - 25))\
			.stringColor_(\cf2 Color\cf0 .white).selectedStringColor_(\cf2 Color\cf0 .green)\
			.items_(~gui[\cf3 \\tabs\cf0 ][1][\cf3 \\areas\cf0 ][\cf3 \\graph\cf0 ].cArray.flop[0][0..15].collect(\{\cf2 |item|\cf0  item.asString \}))\
			.value_(~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\yy\cf0 ])\
			.action_(\{ \cf2 |selection|\cf0 \
				graph.descriptors_(~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\areas\cf0 ][\cf3 \\graphParams\cf0 ][\cf3 \\minList\cf0 ].value,\
					selection.value.max(0).min(descrids.size),\
					~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\areas\cf0 ][\cf3 \\graphParams\cf0 ][\cf3 \\maxList\cf0 ].value\
				)\
			\}))\
		.add(\cf3 \\maxList\cf0  -> \cf2 SCListView\cf0 (graphparams[\cf3 \\view\cf0 ], \cf2 Rect\cf0 (255, 25, 80, gpheight - 25))\
			.stringColor_(\cf2 Color\cf0 .white).selectedStringColor_(\cf2 Color\cf0 .green)\
			.items_(~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\areas\cf0 ][\cf3 \\graph\cf0 ].cArray[0..15].collect(\{\cf2 |col|\cf0  col.maxItem.asString \}))\
			.value_(~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\ss\cf0 ])\
			.action_(\{ \cf2 |selection|\cf0 \
				graph.descriptors_(~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\areas\cf0 ][\cf3 \\graphParams\cf0 ][\cf3 \\minList\cf0 ].value,\
					~gui[\cf3 \\tabs\cf0 ][tabnum][\cf3 \\areas\cf0 ][\cf3 \\graphParams\cf0 ][\cf3 \\unitData\cf0 ].value,\
					selection.value.max(0).min(descrids.size)\
				)\
			\}));\
\};\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 \
~scheduleUpdates = \{ \cf2 |num|\cf0 \
	(num == 0).if \{ (1..3).do(\{ \cf2 |n|\cf0  ~gui[\cf3 \\tabs\cf0 ][n][\cf3 \\needsUpdate\cf0 ] = \cf2 true\cf0  \}) \} \{ ~gui[\cf3 \\tabs\cf0 ][num][\cf3 \\needsUpdate\cf0 ] = \cf2 true\cf0  \};\
\};\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 ~playSegment = \{ \cf2 |pair|\cf0 \
	\cf2 var\cf0  cf, relid = pair[1];\
	(pair[0].isNumber).if \{ cf = ~crps[\cf3 \\sfmap\cf0 ][pair[0]] \} \{ cf = pair[0] \};\
	\cf5 //"Playing unit number: ".post; relid.post; ", from ".post; cf.postln;\cf0 \
	(~crps[\cf3 \\sftable\cf0 ][ cf ][\cf3 \\bfrR\cf0 ] == \cf2 nil\cf0 ).if\
	\{\
		~audio[\cf3 \\monoPlayer\cf0 ].set(\cf3 \\bufNum\cf0 , ~crps[\cf3 \\sftable\cf0 ][ cf ][\cf3 \\bfrL\cf0 ].bufnum, \cf3 \\offset\cf0 , (~crps[\cf3 \\sfutable\cf0 ][cf][\cf3 \\units\cf0 ][relid][3] * 0.001), \cf3 \\dur\cf0 , (~crps[\cf3 \\sfutable\cf0 ][cf][\cf3 \\units\cf0 ][relid][4] * 0.001));	\cf5 // msecs -> secs\cf0 \
		~audio[\cf3 \\mBus\cf0 ].set(1);\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 	\} \{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 		~audio[\cf3 \\stereoPlayer\cf0 ].set(\cf3 \\bufNumL\cf0 , ~crps[\cf3 \\sftable\cf0 ][ cf ][\cf3 \\bfrL\cf0 ].bufnum, \cf3 \\bufNumR\cf0 , ~crps[\cf3 \\sftable\cf0 ][ cf ][\cf3 \\bfrR\cf0 ].bufnum, \cf3 \\offset\cf0 , (~crps[\cf3 \\sfutable\cf0 ][cf][\cf3 \\units\cf0 ][relid][3] * 0.001), \cf3 \\dur\cf0 , (~crps[\cf3 \\sfutable\cf0 ][cf][\cf3 \\units\cf0 ][relid][4] * 0.001));	\cf5 // msecs -> secs\cf0 \
		~audio[\cf3 \\sBus\cf0 ].set(1);\
	\}\
\};\
)\
\
\cf5 ////***********************************************************************************************\cf0 \
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf5 ////		Load Audio Server + Send SynthDefs\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 \
\cf2 Server\cf0 .default = \cf2 Server\cf0 .internal;\
~audio = \cf2 Dictionary\cf0 [];\
~audio.add(\cf3 \\server\cf0  -> \cf2 Server\cf0 .default.boot);\
\pard\pardeftab560\li1700\fi-1700\ql\qnatural
\cf0 \
(\
\cf2 SynthDef\cf0 .new(\cf3 \\unitSamplerMono\cf0 , \{ \cf2 |out=0, busTrig=1, bufNum=1, transp=1, offset=0,attack=0.01,dur=1,release=0.5, pan=0, da=0|\cf0 \
	\cf2 var\cf0  env, chunk, inTrig, inBuff, inPan, cPos, atk, rls;\
	inTrig = \cf2 InTrig\cf0 .kr(busTrig);\
	cPos = offset + (dur * 0.5);\
	atk = attack;\
	rls = release;\
	\cf5 //env = EnvGen.kr(Env.linen(attack, durLength, release, inTrig), gate: inTrig, doneAction: da);\cf0 \
	chunk = \cf2 TGrains2\cf0 .ar(2, inTrig, bufNum, transp, cPos, dur, 0, inTrig, atk, rls, 4);\
	\cf2 Out\cf0 .ar( out, chunk );\
\}).send(~audio[\cf3 \\server\cf0 ]);\
\
\cf2 SynthDef\cf0 .new(\cf3 \\unitSamplerStereo\cf0 , \{ \cf2 |out=0, busTrig=1, bufNumL=1, bufNumR, transp=1, offset=0,attack=0.01,dur=1,release=0.5, pan=0, da=0|\cf0 \
	\cf2 var\cf0  env, chunkL, chunkR, inTrig, inBuff, inPan, cPos, atk, rls;\
	inTrig = \cf2 InTrig\cf0 .kr(busTrig);\
	cPos = offset + (dur * 0.5);\
	atk = attack;\
	rls = release;\
	\cf5 //env = EnvGen.kr(Env.linen(attack, durLength, release, inTrig), gate: inTrig, doneAction: da);\cf0 \
	chunkL = \cf2 TGrains2\cf0 .ar(2, inTrig, bufNumL, transp, cPos, dur, -1, inTrig, atk, rls, 4);\
	chunkR = \cf2 TGrains2\cf0 .ar(2, inTrig, bufNumR, transp, cPos, dur, 1, inTrig, atk, rls, 4);\
	\cf2 Out\cf0 .ar( out, chunkL + chunkR );\
\}).send(~audio[\cf3 \\server\cf0 ]);\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 )\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf5 ////***********************************************************************************************\cf0 \
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf5 ////		Init Database + Build GUI...\cf0 \
\pard\pardeftab560\ql\qnatural
\cf0 \
(\
~crps = \cf2 CorpusDB\cf0 .new(\cf4 "/Users/tms/dev/supercollider/bells/snd"\cf0 , s);\
\
~audio.add(\cf3 \\mBus\cf0  -> \cf2 Bus\cf0 .control(s, 1));\
~audio.add(\cf3 \\monoPlayer\cf0  -> \cf2 Synth\cf0 .new(\cf3 \\unitSamplerMono\cf0 , [\cf3 \\busTrig\cf0 , ~audio[\cf3 \\mBus\cf0 ]]));\
~audio.add(\cf3 \\sBus\cf0  -> \cf2 Bus\cf0 .control(s, 1));\
~audio.add(\cf3 \\stereoPlayer\cf0  -> \cf2 Synth\cf0 .new(\cf3 \\unitSamplerStereo\cf0 , [\cf3 \\busTrig\cf0 , ~audio[\cf3 \\sBus\cf0 ]]));\
\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf5 ////***********************************************************************************************\cf0 \
\cf5 ////		Begin GUI code\cf0 \
\cf5 ////\cf0 \
\cf5 //// window + top level container (tabbedView) + top level container views and storage\cf0 \
\
~gui = \cf2 Dictionary\cf0 [];\
~gui.add(\cf3 \\topWindow\cf0  -> \cf2 SCWindow\cf0 (\cf4 "drones.xxxx db"\cf0 , \cf2 Rect\cf0 (305, 75, 1120, 840)).acceptsMouseOver_(\cf2 true\cf0 ));\
~gui.add(\cf3 \\tabs\cf0  -> \cf2 Dictionary\cf0 []);\
~gui.add(\cf3 \\cf\cf0  -> 0)		\cf5 // 'helper' vars\cf0 \
	.add(\cf3 \\cp\cf0  -> 0)\
	.add(\cf3 \\fileListDict\cf0  -> \cf2 Dictionary\cf0 [])\
	.add(\cf3 \\soundFileUnitRowViews\cf0  -> \cf2 Dictionary\cf0 []);\
\
~gui[\cf3 \\tabs\cf0 ].add(\cf3 \\view\cf0  -> \cf2 TabbedView\cf0 ( ~gui[\cf3 \\topWindow\cf0 ], \cf2 nil\cf0 , [\cf4 "import"\cf0 ,\cf4 "graph/db"\cf0 ], [\cf2 Color\cf0 .gray(0.25, 0.5)])\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 	.tabPosition_(\cf3 \\top\cf0 ).tabWidth_(70).tabHeight_(13).tabCurve_(3)\
	.backgrounds_([\cf2 Color\cf0 .gray(0.2)]).stringColor_(\cf2 Color\cf0 .white).stringFocusedColor_(\cf2 Color\cf0 .green));\
	\
~gui[\cf3 \\tabs\cf0 ][\cf3 \\view\cf0 ].views.do(\{ \cf2 |vw, ix|\cf0 \
	~gui[\cf3 \\tabs\cf0 ].add(ix -> \cf2 Dictionary\cf0 [\cf3 \\nameTag\cf0  -> [\cf3 \\importAnalyzeSegment\cf0 , \cf3 \\graph\cf0 , \cf3 \\scene\cf0 , \cf3 \\web\cf0 ][ix], \cf3 \\view\cf0  -> \cf2 SCScrollView\cf0 (~gui[\cf3 \\tabs\cf0 ][\cf3 \\view\cf0 ].views[ix], ~gui[\cf3 \\tabs\cf0 ][\cf3 \\view\cf0 ].views[ix].asView.bounds), \cf3 \\areas\cf0  -> \cf2 Dictionary\cf0 [], \cf3 \\needsUpdate\cf0  -> \cf2 true\cf0 ])\
\});\
\
\cf5 //// some additional behaviors for the top level views\cf0 \
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 ~gui[\cf3 \\topWindow\cf0 ].onClose_( \{\cf2 |ind|\cf0  [~audio[\cf3 \\mBus\cf0 ], ~audio[\cf3 \\sBus\cf0 ], ~audio[\cf3 \\monoPlayer\cf0 ], ~audio[\cf3 \\stereoPlayer\cf0 ], ~crps].do(\cf2 _\cf0 .free) \} );\
\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf5 //// containers/areas\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 ~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ].add(\cf3 \\waveform\cf0  -> \cf2 Dictionary\cf0 [\cf3 \\view\cf0  -> \cf2 SCCompositeView\cf0 (~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (0, 0, 690, 160)).background_(\cf2 Color\cf0 .black)])\
	.add(\cf3 \\analysis\cf0  -> \cf2 SCCompositeView\cf0 (~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (-5, 165, 700, 420)).background_(\cf2 Color\cf0 .black))\
	.add(\cf3 \\filesList\cf0  -> \cf2 Dictionary\cf0 [\cf3 \\view\cf0  -> \cf2 SCCompositeView\cf0 (~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (700, 0, 415, 440)).background_(\cf2 Color\cf0 .black)])\
	.add(\cf3 \\segBtns\cf0  -> \cf2 Dictionary\cf0 [\cf3 \\view\cf0  -> \cf2 SCCompositeView\cf0 (~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (5, 585, 25, 225)).background_(\cf2 Color\cf0 .black)])\
	.add(\cf3 \\segments\cf0  -> \cf2 Dictionary\cf0 [\cf3 \\view\cf0  -> \cf2 SCScrollView\cf0 (~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (25, 585, 1080, 225)).background_(\cf2 Color\cf0 .black)])\
	.add(\cf3 \\highlighter\cf0  -> \cf2 SCCompositeView\cf0 (~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (695, 445, 415, 170)));\
\
~gui[\cf3 \\tabs\cf0 ][1][\cf3 \\areas\cf0 ].add(\cf3 \\graph\cf0  -> \cf2 CorpusUnitViewer\cf0 (~gui[\cf3 \\tabs\cf0 ][1][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (0,0, 640, 640), ~crps, 5, 6, 7))\
	.add(\cf3 \\graphParams\cf0  -> \cf2 Dictionary\cf0 [\cf3 \\view\cf0  -> \cf2 SCCompositeView\cf0 (~gui[\cf3 \\tabs\cf0 ][1][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (650, 5, 360, 400)).background_(\cf2 Color\cf0 .black)])\
	.add(\cf3 \\unitPlayer\cf0  -> \cf2 Dictionary\cf0 [\cf3 \\view\cf0  -> \cf2 SCCompositeView\cf0 (~gui[\cf3 \\tabs\cf0 ][1][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (650, 650, 360, 160)).background_(\cf2 Color\cf0 .black)])\
	.add(\cf3 \\highlighter\cf0  -> \cf2 SCCompositeView\cf0 (~gui[\cf3 \\tabs\cf0 ][1][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (650, 405, 360, 240)));\
\
\cf5 //// waveform area\cf0 \
~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\waveform\cf0 ].add(\cf3 \\fullView\cf0  -> \cf2 SCSoundFileView\cf0 (~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\waveform\cf0 ][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (0, 0, 690, 60))\
		.gridColor_(\cf2 Color\cf0 .gray)\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 		.action_())\
	.add(\cf3 \\zoomBar\cf0  -> \cf2 SCRangeSlider\cf0 (~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\waveform\cf0 ][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (0, 60, 690, 20))\
		.lo_(0.0).hi_(1.0)\
		.mouseUpAction_(\{ \cf2 |slider|\cf0 \
			\cf2 var\cf0  zaRangeLo, zaRangeHi, zoomArray, temp;\
			\cf5 //"slider: ".post; slider.lo.post; slider.hi.postln;\cf0 \
			\cf2 var\cf0  cview = ~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\waveform\cf0 ][\cf3 \\closeView\cf0 ];\
			cview.zoomToFrac(1);\
			cview.scrollToStart;\
			cview.zoom(slider.hi - slider.lo);\
			cview.scroll(slider.lo / (slider.hi - slider.lo));\
			zoomArray = ~crps[\cf3 \\sfutable\cf0 ][~gui[\cf3 \\cf\cf0 ]][\cf3 \\rawdescrs\cf0 ].flop;\
			zaRangeLo = (slider.lo * zoomArray[0].size).floor.asInteger;\
			zaRangeHi = (slider.hi * zoomArray[0].size).ceil.asInteger;\
			temp = zoomArray.collect(\{ \cf2 |row|\cf0  row[zaRangeLo..zaRangeHi] \});\
			\
			~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\analysis\cf0 ].children.do(\cf2 _\cf0 .remove);\
			\cf2 Plotter\cf0 (parent: ~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\analysis\cf0 ])\
				.value_(temp)\
\pard\pardeftab560\ql\qnatural
\cf0 				.plotMode_(\cf3 \\linear\cf0 )\
				.superpose_(\cf2 false\cf0 )\
				.findSpecs_(\cf2 true\cf0 )\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf5 //				.editFunc_(\{|pl, pli, idx, val|\cf0 \
\cf5 //					pli.post; "...".post; idx.post; "....".post; val.postln;\cf0 \
\cf5 //					~crps[\\sfutable][~gui[\\cf]][\\rawdescrs][pli][idx] = val;\cf0 \
\cf5 //				\});\cf0 \
		\});\
)\
	.add(\cf3 \\closeView\cf0  -> \cf2 SCSoundFileView\cf0 (~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\waveform\cf0 ][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (0, 80, 690, 80))\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 		.gridColor_(\cf2 Color\cf0 .gray)\
\pard\pardeftab560\ql\qnatural
\cf0 		.mouseUpAction_(\{ \cf2 |vw,x,y|\cf0 \
			\cf5 // update the data model\cf0 \
			~crps.updateSoundFileUnit(~gui[\cf3 \\cf\cf0 ], ~gui[\cf3 \\cp\cf0 ], \cf2 nil\cf0 ,\
				(~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\waveform\cf0 ][\cf3 \\closeView\cf0 ].selectionStart(0) / 44.1).max(0).floor,\
				(~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\waveform\cf0 ][\cf3 \\closeView\cf0 ].selectionSize(0) / 44.1).ceil);\
\
			\cf5 // update number boxes + fullView\cf0 \
			~updateSoundFileUnitRow.value(~gui[\cf3 \\cp\cf0 ], ~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\waveform\cf0 ][\cf3 \\fullView\cf0 ]);\
			\
			~crps.segmentUnits(~gui[\cf3 \\cf\cf0 ]);\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 			~gui[\cf3 \\soundFileUnitRowViews\cf0 ].keys.do(\{ \cf2 |pid|\cf0 \
				~gui[\cf3 \\soundFileUnitRowViews\cf0 ][pid][5].value_(~crps[\cf3 \\sfutable\cf0 ][~gui[\cf3 \\cf\cf0 ]][\cf3 \\units\cf0 ][pid][0..15].asString);\
			\});\
\pard\pardeftab560\ql\qnatural
\cf0 			~graphNeedsUpdate = \cf2 true\cf0 ;\
		\})\
	);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 \
\cf5 //// filesList area\cf0 \
~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ].add(\cf3 \\addFileButton\cf0  -> \cf2 SCButton\cf0 (~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (5, 5, 45, 20))\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 		.states_([[\cf4 "+file"\cf0 , \cf2 Color\cf0 .black, \cf2 Color\cf0 .white]])\
		.value_(0)\
		.action_(\{ \cf2 |bttn|\cf0 \
			\cf2 CocoaDialog\cf0 .getPaths(\{ \cf2 |paths|\cf0 \
				paths.do(\{ \cf2 |pth|\cf0 \
					\cf2 var\cf0  sf, thepath;\
					\cf2 var\cf0  fileListView = ~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ][\cf3 \\fileListView\cf0 ];\
					sf = \cf2 SoundFile\cf0 .openRead(pth.asString);\
					\cf5 //"SF: ".post; sf.post; " with ".post; sf.numChannels.post; " channels.".postln;\cf0 \
					(sf != \cf2 nil\cf0 ).if\
					\{\
						thepath = \cf2 PathName\cf0 .new(sf.path.asString);\
						~crps.addSoundFile(thepath.fullPath, sf.numChannels);\
						fileListView.items_((fileListView.items ++ [thepath.fileName]).asSet.asArray.sort);\
						~gui[\cf3 \\fileListDict\cf0 ].add(thepath.fileName -> thepath.fullPath);\
					\}\
				\});\
			\},\{	\cf4 "cancelled"\cf0 .postln \}, \cf2 false\cf0 );\
		\}))\
	.add(\cf3 \\addFolderButton\cf0  -> \cf2 SCButton\cf0 (~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (55, 5, 45, 20))\
		.states_([[\cf4 "+dir"\cf0 , \cf2 Color\cf0 .black, \cf2 Color\cf0 .white]])\
		.value_(0)\
		.action_(\{ \cf2 |bttn|\cf0 \
			\cf2 var\cf0  counter = 0;\
			\cf2 CocoaDialog\cf0 .getPaths(\{ \cf2 |paths|\cf0 \
				paths.do(\{ \cf2 |pth|\cf0 \
					\cf2 var\cf0  fileListView = ~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ][\cf3 \\fileListView\cf0 ];\
					\cf2 var\cf0  sf = \cf2 SoundFile\cf0 .openRead(pth.asString);\
					\cf2 var\cf0  thepath = \cf2 PathName\cf0 .new(sf.path.asString);\
					\cf2 var\cf0  thefiles = \cf2 PathName\cf0 .new(thepath.pathOnly.asString).files;\
					\cf2 var\cf0  theentries = \cf2 PathName\cf0 .new(thepath.pathOnly.asString).files;\
					counter = thefiles.size;\
					\cf2 AppClock\cf0 .sched(0.001, \
					\{\
						(counter > 0).if\
						\{ \
							~crps.addSoundFile(thefiles[counter - 1].fullPath, sf.numChannels);\
							fileListView.items_((fileListView.items ++ [theentries[counter - 1].fileName]).asSet.asArray.sort);\
							~gui[\cf3 \\fileListDict\cf0 ].add(theentries[counter - 1].fileName -> theentries[counter - 1].fullPath);\
							counter = counter - 1;\
							0.001\
						\} \{ \cf2 nil\cf0  \};\
					\});\
				\});\
			\},\{\
				\cf4 "cancelled"\cf0 .postln;\
			\}, \cf2 false\cf0 );\
		\}))\
	.add(\cf3 \\removeFileButton\cf0  -> \cf2 SCButton\cf0 (~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (105, 5, 45, 20))\
		.states_([[\cf4 "-file"\cf0 , \cf2 Color\cf0 .red, \cf2 Color\cf0 .white]])\
		.value_(0)\
		.action_(\{ \cf2 |btn|\cf0 \
			\cf2 var\cf0  findex = ~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ][\cf3 \\fileListView\cf0 ].value;\
			\cf2 var\cf0  fname = ~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ][\cf3 \\fileListView\cf0 ].items[ findex ]; \cf5 // ~gui[\\fileListDict][ ];\cf0 \
			\cf2 var\cf0  tmp = ~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ][\cf3 \\fileListView\cf0 ].items;\
			tmp.removeAt(findex);\
			~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ][\cf3 \\fileListView\cf0 ].items_(tmp);\
			~crps.removeSoundFile(~gui[\cf3 \\fileListDict\cf0 ][fname]);\
			~gui[\cf3 \\fileListDict\cf0 ].add(fname -> \cf2 nil\cf0 );\
			~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ][\cf3 \\fileListView\cf0 ].valueAction_(0);\
		\}))\
	.add(\cf3 \\importButton\cf0  -> \cf2 SCButton\cf0 (~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (155, 5, 45, 20))\
		.states_([[\cf4 "import"\cf0 , \cf2 Color\cf0 .black, \cf2 Color\cf0 .white]])\
		.value_(0)\
		.action_(\{ \cf2 |btn|\cf0 \
			\cf2 CocoaDialog\cf0 .getPaths(\{ \cf2 |paths|\cf0 \
				paths.do(\{ \cf2 |pth|\cf0 \
					\cf2 var\cf0  thepath = \cf2 PathName\cf0 .new(pth.asString).fullPath.asString, tmp = \cf2 Array\cf0 [];\
					\cf2 var\cf0  fileListView = ~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ][\cf3 \\fileListView\cf0 ];\
					~crps.importCorpusFromXML(~audio[\cf3 \\server\cf0 ], thepath);\
					~crps[\cf3 \\sftable\cf0 ].keys.do(\{\cf2 |filename|\cf0 \
						tmp = tmp ++ [\cf2 PathName\cf0 .new(filename).fileName];\
						~gui[\cf3 \\fileListDict\cf0 ].add(\cf2 PathName\cf0 .new(filename).fileName -> \cf2 PathName\cf0 .new(filename).fullPath);\
					\});\
					\
					fileListView.items_((fileListView.items ++ tmp).asSet.asArray.sort);\
					\
					~graphNeedsUpdate = \cf2 true\cf0 ;\
\pard\pardeftab560\ql\qnatural
\cf0 				\});\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 			\},\{	\cf4 "cancelled"\cf0 .postln \}, \cf2 false\cf0 );\
		\}))\
	.add(\cf3 \\exportButton\cf0  -> \cf2 SCButton\cf0 (~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (205, 5, 45, 20))\
		.states_([[\cf4 "export"\cf0 , \cf2 Color\cf0 .black, \cf2 Color\cf0 .white]])\
		.value_(0)\
		.action_(\{ \cf2 |btn|\cf0 \
			\cf2 CocoaDialog\cf0 .savePanel(\{ \cf2 |path|\cf0 \
				~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ][\cf3 \\dropUnanalyzedButton\cf0 ].action.value;\
				~crps.exportCorpusToXML(~audio[\cf3 \\server\cf0 ], path);\
			\},\{\
				\cf4 "cancelled"\cf0 .postln;\
			\});\
		\}))\
	.add(\cf3 \\dropUnanalyzedButton\cf0  -> \cf2 SCButton\cf0 (~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (255, 5, 120, 20))\
		.states_([[\cf4 "-- drop unanalyzed"\cf0 , \cf2 Color\cf0 .red, \cf2 Color\cf0 .white]])\
		.value_(0)\
		.action_(\{ \cf2 |bttn|\cf0 \
			\cf2 var\cf0  tmp = \cf2 Array\cf0 [];\
			~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ][\cf3 \\fileListView\cf0 ].items.do(\{ \cf2 |file|\cf0 \
				file.asString.postln;\
				(~crps[\cf3 \\sftable\cf0 ][~gui[\cf3 \\fileListDict\cf0 ][file.asString]][\cf3 \\abfr\cf0 ] != \cf2 nil\cf0 ).if\
				\{\
					tmp = tmp.add(file.asString);\
				\} \{\
					~crps.removeSoundFile(~gui[\cf3 \\fileListDict\cf0 ][file.asString]);\
				\};		\
			\});\
			~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ][\cf3 \\fileListView\cf0 ].items_(tmp.asSet.asArray.sort);\
		\}))\
	.add(\cf3 \\fileListView\cf0  -> \cf2 SCListView\cf0 (~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (5, 30, 400, 400))\
		.stringColor_(\cf2 Color\cf0 .white)\
		.selectedStringColor_(\cf2 Color\cf0 .green)\
		.items_([])\
		.action_(\{ \cf2 |q|\cf0 \
			\cf2 var\cf0  cf, sf, tmp, responder, responder2;\
			\cf5 // declare abbreviations for areas of the gui to be accessed:\cf0 \
			\cf2 var\cf0  waveformArea = ~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\waveform\cf0 ], analysisArea = ~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\analysis\cf0 ], fileListArea = ~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\filesList\cf0 ];\
			\cf5 // empty ~soundFileUnits out\cf0 \
			~gui[\cf3 \\soundFileUnitRowViews\cf0 ].do(\{ \cf2 |line|\cf0  line.pop; line.do(\{ \cf2 |elem|\cf0  elem.remove; elem.free \}) \});\
			~gui[\cf3 \\soundFileUnitRowViews\cf0 ] = \cf2 Dictionary\cf0 [];\
			\cf5 // get the menu selection and set current file global\cf0 \
			cf = ~gui[\cf3 \\fileListDict\cf0 ][ fileListArea[\cf3 \\fileListView\cf0 ].items[q.value] ];\
			~gui[\cf3 \\cf\cf0 ] = cf;\
			\cf5 // if non-nil, read out cached units into sfunitrows\cf0 \
			(~crps[\cf3 \\sfutable\cf0 ][~gui[\cf3 \\cf\cf0 ]][\cf3 \\units\cf0 ] != \cf2 nil\cf0 ).if\
			\{\
				~crps[\cf3 \\sfutable\cf0 ][~gui[\cf3 \\cf\cf0 ]][\cf3 \\units\cf0 ].do(\{ \cf2 |pu, ix|\cf0 \
					~gui[\cf3 \\soundFileUnitRowViews\cf0 ] = ~gui[\cf3 \\soundFileUnitRowViews\cf0 ].add(ix -> \
						~newSoundFileUnitRow.value(\
							~gui[\cf3 \\cf\cf0 ],\
							ix,\
							~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\segments\cf0 ][\cf3 \\view\cf0 ],\
							waveformArea[\cf3 \\fullView\cf0 ],\
							waveformArea[\cf3 \\closeView\cf0 ]\
						);\
					)\
				\});\
				\cf5 //~updateCurrentSoundFileUnit.value(0);\cf0 \
			\} \{\
				\cf4 "...not cached... "\cf0 .postln;\
			\};\
			\cf5 // read sound file and stream or post analysis data\cf0 \
			sf = \cf2 SoundFile\cf0 .new;\
			(sf.openRead(cf) == \cf2 true\cf0 ).if\
			\{\
				fileListArea[\cf3 \\fileListView\cf0 ].enabled = \cf2 false\cf0 ;\
				waveformArea[\cf3 \\fullView\cf0 ].soundfile = sf;\
				waveformArea[\cf3 \\fullView\cf0 ].read(0, sf.numFrames);\
				waveformArea[\cf3 \\closeView\cf0 ].soundfile = sf;\
				waveformArea[\cf3 \\closeView\cf0 ].read(0, sf.numFrames);\
				\cf4 "window should refresh now!"\cf0 .postln;\
				~gui[\cf3 \\topWindow\cf0 ].refresh;\
				\
				(~crps[\cf3 \\sfutable\cf0 ][cf][\cf3 \\rawdescrs\cf0 ] == \cf2 nil\cf0 ).if\
				\{	\cf5 // stream it\cf0 \
					~crps.analyzeSoundFile(cf.asString);\
					\cf5 // schedule the updates\cf0 \
					responder2 = \cf2 OSCresponder\cf0 (~audio[\cf3 \\server\cf0 ].addr, \cf3 '/tr'\cf0 , \{ \cf2 |time,resp,msg|\cf0 \
						\cf2 AppClock\cf0 .sched(0, \{ \cf2 |tm|\cf0 \
							analysisArea.children.do(\cf2 _\cf0 .remove);\
\pard\pardeftab560\ql\qnatural
\cf0 							\cf2 Plotter\cf0 (parent: analysisArea)\
								.value_(~crps[\cf3 \\sfutable\cf0 ][cf][\cf3 \\rawdescrs\cf0 ].flop)\
								.plotMode_(\cf3 \\plines\cf0 )\
								.superpose_(\cf2 false\cf0 )\
								.findSpecs_(\cf2 true\cf0 )\
								.editFunc_(\{\cf2 |pl, pli, idx, val|\cf0 \
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 									pli.post; \cf4 "..."\cf0 .post; idx.post; \cf4 "...."\cf0 .post; val.postln;\
									~crps[\cf3 \\sfutable\cf0 ][cf][\cf3 \\rawdescrs\cf0 ][pli][idx] = val;\
								\});\
							\cf2 nil\cf0 \
						\});\
\pard\pardeftab560\ql\qnatural
\cf0 					\}).add;\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 					\cf5 // schedule the last update			\cf0 \
					\cf2 AppClock\cf0 .sched(sf.duration + 0.001, \{ \cf2 |tm|\cf0 \
						analysisArea.children.do(\cf2 _\cf0 .remove);\
						\cf2 Plotter\cf0 (parent: analysisArea)\
\pard\pardeftab560\ql\qnatural
\cf0 							.value_(~crps[\cf3 \\sfutable\cf0 ][cf][\cf3 \\rawdescrs\cf0 ].flop)\
							.plotMode_(\cf3 \\plines\cf0 )\
							.superpose_(\cf2 false\cf0 )\
							.findSpecs_(\cf2 true\cf0 )\
							.editFunc_(\{\cf2 |pl, pli, idx, val|\cf0 \
								pli.post; \cf4 "..."\cf0 .post; idx.post; \cf4 "...."\cf0 .post; val.postln;\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 								~crps[\cf3 \\sfutable\cf0 ][cf][\cf3 \\rawdescrs\cf0 ][pli][idx] = val;\
							\});\
						fileListArea[\cf3 \\fileListView\cf0 ].enabled = \cf2 true\cf0 ;\
						\cf2 nil\cf0 \
					\});\
				\} \{ \cf5 // post it if cached \cf0 \
					analysisArea.children.do(\cf2 _\cf0 .remove);\
\pard\pardeftab560\ql\qnatural
\cf0 					\cf2 Plotter\cf0 (parent: analysisArea)\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 						.value_(~crps[\cf3 \\sfutable\cf0 ][cf][\cf3 \\rawdescrs\cf0 ].flop)\
\pard\pardeftab560\ql\qnatural
\cf0 						.plotMode_(\cf3 \\plines\cf0 )\
						.superpose_(\cf2 false\cf0 )\
						.findSpecs_(\cf2 true\cf0 )\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 						.editFunc_(\{\cf2 |pl, pli, idx, val|\cf0 \
							pli.post; \cf4 "..."\cf0 .post; idx.post; \cf4 "...."\cf0 .post; val.postln;\
							~crps[\cf3 \\sfutable\cf0 ][cf][\cf3 \\rawdescrs\cf0 ][pli][idx] = val;\
						\});\
					\cf2 AppClock\cf0 .sched(0, \{ \cf2 |tm|\cf0  fileListArea[\cf3 \\fileListView\cf0 ].enabled = \cf2 true\cf0  \});\
				\};\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 				[responder, responder2].do(\cf2 _\cf0 .remove; \cf2 _\cf0 .free);	\cf5 // clean up!\cf0 \
			\};\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 			\cf5 // update the sfviews (close and full) no matter what\cf0 \
			~updateSFViews.value(~gui[\cf3 \\cf\cf0 ], waveformArea[\cf3 \\fullView\cf0 ], waveformArea[\cf3 \\closeView\cf0 ], 0);\
		\}));\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf5 //// segments area\cf0 \
~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\segBtns\cf0 ].add(\cf3 \\plusButton\cf0  -> \cf2 SCButton\cf0 (~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\segBtns\cf0 ][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (2, 5, 20, 20))\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 	.states_([[\cf4 "+"\cf0 ,\cf2 Color\cf0 .black,\cf2 Color\cf0 .white]])\
	.value_(0)\
	.mouseUpAction_(\{ \cf2 |bttn|\cf0 \
		\cf2 var\cf0  np, tmp;\
		\cf2 var\cf0  waveformArea = ~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\waveform\cf0 ];\
		(~crps[\cf3 \\sfutable\cf0 ][~gui[\cf3 \\cf\cf0 ]][\cf3 \\units\cf0 ] == \cf2 nil\cf0 ).if\
		\{\
			np = 0;\
			~crps.addSoundFileUnit(~gui[\cf3 \\cf\cf0 ], np, [0, 500]);\
		\} \{ \cf5 // else\cf0 \
			tmp = ~crps[\cf3 \\sfutable\cf0 ][~gui[\cf3 \\cf\cf0 ]][\cf3 \\units\cf0 ].collect(\{ \cf2 |unit|\cf0  unit[3..4] \}).sort(\{\cf2 |a,b|\cf0  a[0] > b[0]\});\
			np = ~crps[\cf3 \\sfutable\cf0 ][~gui[\cf3 \\cf\cf0 ]][\cf3 \\units\cf0 ].size;\
			~crps.addSoundFileUnit(~gui[\cf3 \\cf\cf0 ], np, [tmp[0][0] + tmp[0][1], 500]);\
		\};\
\
		~crps.segmentUnits(~gui[\cf3 \\cf\cf0 ]);\
		tmp = ~newSoundFileUnitRow.value(~gui[\cf3 \\cf\cf0 ], np, ~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\segments\cf0 ][\cf3 \\view\cf0 ], waveformArea[\cf3 \\fullView\cf0 ], waveformArea[\cf3 \\closeView\cf0 ]);\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf5 //		"Adding to Views Dictionary.".postln;\cf0 \
		~gui[\cf3 \\soundFileUnitRowViews\cf0 ] = ~gui[\cf3 \\soundFileUnitRowViews\cf0 ].add(np -> tmp);\
\cf5 //		~gui[\\soundFileUnitRowViews][~gui[\\cp]][0].value_(1);\cf0 \
		waveformArea[\cf3 \\fullView\cf0 ].setSelection(np, ~crps[\cf3 \\sfutable\cf0 ][~gui[\cf3 \\cf\cf0 ]][\cf3 \\units\cf0 ][np][3..4] * 44.1);\
\cf5 //		(~gui[\\cp] == np).if \{ waveformArea[\\closeView].setSelection(np, ~crps[\\sfutable][~gui[\\cf]][\\units][np][3..4] * 44.1) \};\cf0 \
		~scheduleUpdates.value(1);\
	\});\
);\
~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\segBtns\cf0 ].add(\cf3 \\fillButton\cf0  -> \cf2 SCButton\cf0 (~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\segBtns\cf0 ][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (2, 30, 20, 20))\
	.states_([[\cf4 "->"\cf0 ,\cf2 Color\cf0 .black,\cf2 Color\cf0 .white]])\
	.value_(0)\
	.mouseUpAction_(\{ \cf2 |bttn|\cf0 \
		\cf2 var\cf0  last = ~gui[\cf3 \\soundFileUnitRowViews\cf0 ].size - 1;\
		\cf2 var\cf0  sfile = ~gui[\cf3 \\cf\cf0 ];\
		\cf2 var\cf0  sfid = ~crps[\cf3 \\sfmap\cf0 ].findKeyForValue(~gui[\cf3 \\cf\cf0 ]);\
		\cf2 var\cf0  waveformArea = ~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\waveform\cf0 ];\
		\cf5 // update the last one, filling to duration of sfile\cf0 \
		~crps.updateSoundFileUnit(sfile, last,\
			dur: (~crps[\cf3 \\sftable\cf0 ][~gui[\cf3 \\cf\cf0 ]][\cf3 \\bfrL\cf0 ].numFrames / 44.1) - ~crps.getSoundFileUnitMetadata(sfid , last)[3]);\
		(last > 0).if\
		\{	\
			((last - 1)..0).do(\{ \cf2 |pid|\cf0 \
				~crps.updateSoundFileUnit(sfile, pid,\
					dur: (~crps.getSoundFileUnitMetadata(sfid , pid + 1)[3] - ~crps.getSoundFileUnitMetadata(sfid , pid)[3]));\
			\});\
		\};\
		\cf5 //~crps[\\sfutable][~gui[\\cf]][\\units].postcs;\cf0 \
		~gui[\cf3 \\soundFileUnitRowViews\cf0 ].do(\{ \cf2 |line|\cf0  line.pop; line.do(\{ \cf2 |elem|\cf0  elem.remove; elem.free \}) \});\
		~gui[\cf3 \\soundFileUnitRowViews\cf0 ] = \cf2 Dictionary\cf0 [];\
		\
		(~crps[\cf3 \\sfutable\cf0 ][~gui[\cf3 \\cf\cf0 ]][\cf3 \\units\cf0 ] != \cf2 nil\cf0 ).if\
		\{\
			~crps[\cf3 \\sfutable\cf0 ][~gui[\cf3 \\cf\cf0 ]][\cf3 \\units\cf0 ].do(\{ \cf2 |pu, ix|\cf0 \
				~gui[\cf3 \\soundFileUnitRowViews\cf0 ] = ~gui[\cf3 \\soundFileUnitRowViews\cf0 ].add(ix -> \
					~newSoundFileUnitRow.value(\
						~gui[\cf3 \\cf\cf0 ],\
						ix,\
						~gui[\cf3 \\tabs\cf0 ][0][\cf3 \\areas\cf0 ][\cf3 \\segments\cf0 ][\cf3 \\view\cf0 ],\
						waveformArea[\cf3 \\fullView\cf0 ],\
						waveformArea[\cf3 \\closeView\cf0 ]\
					);\
				)\
			\});\
		\};\
		~updateSFViews.value(~gui[\cf3 \\cf\cf0 ], waveformArea[\cf3 \\fullView\cf0 ], waveformArea[\cf3 \\closeView\cf0 ], 0);\
	\});\
);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 \
\cf5 ////====================================================================================\cf0 \
\cf5 ////\cf0 \
\cf5 ////		Graph View (tabs.views[1])\cf0 \
\
~gui[\cf3 \\tabs\cf0 ][\cf3 \\view\cf0 ].focusActions[1] = \{\
	\cf4 "focussing!"\cf0 .postln;\
	(~gui[\cf3 \\tabs\cf0 ][1][\cf3 \\needsUpdate\cf0 ] == \cf2 true\cf0 ).if\
	\{\
		\cf4 "init the graph"\cf0 .postln; \
		~buildGraphParams.value(1, 5, 6, 7, \cf2 nil\cf0 , \cf2 Color\cf0 .blue);\
		~gui[\cf3 \\tabs\cf0 ][1][\cf3 \\needsUpdate\cf0 ] = \cf2 false\cf0 ;\
	\}\
\};\
\
~gui[\cf3 \\tabs\cf0 ][1][\cf3 \\areas\cf0 ][\cf3 \\unitPlayer\cf0 ].add(\cf3 \\linkButton\cf0  -> \cf2 SCButton\cf0 .new( ~gui[\cf3 \\tabs\cf0 ][1][\cf3 \\areas\cf0 ][\cf3 \\unitPlayer\cf0 ][\cf3 \\view\cf0 ], \cf2 Rect\cf0 (5, 5, 60, 20))\
	.states_([[\cf4 "touch"\cf0 , \cf2 Color\cf0 .black, \cf2 Color\cf0 .white], [\cf4 "search"\cf0 , \cf2 Color\cf0 .black, \cf2 Color\cf0 .green]])\
	.value_(0)\
	.mouseUpAction_(\{ \cf2 |btn|\cf0 \
		btn.value.postln;\
		(btn.value == 1).if\
		\{\
			~gui[\cf3 \\tabs\cf0 ][1][\cf3 \\areas\cf0 ][\cf3 \\graph\cf0 ].setSearchFlag_(\cf2 false\cf0 );\
		\} \{\
			~gui[\cf3 \\tabs\cf0 ][1][\cf3 \\areas\cf0 ][\cf3 \\graph\cf0 ].setSearchFlag_(\cf2 true\cf0 );\
		\};\
	\});\
);\
\
\pard\pardeftab560\ql\qnatural

\f1\fs18 \cf5 // specify plot layout\cf0 \
\cf2 GUI\cf0 .skin.plot.gridLinePattern = \cf2 FloatArray\cf0 [2, 1];\
\cf2 GUI\cf0 .skin.plot.fontColor = \cf2 Color\cf0 .white;\
\cf2 GUI\cf0 .skin.plot.gridColorX = \cf2 Color\cf0 .gray(0.75, 0.25);\
\cf2 GUI\cf0 .skin.plot.gridColorY = \cf2 Color\cf0 .gray(0.75, 0.25);\
\cf2 GUI\cf0 .skin.plot.background = \cf2 Color\cf0 .black;\
\cf2 GUI\cf0 .skin.plot.plotColor = \cf2 Color\cf0 .blue;\
\cf2 GUI\cf0 .skin.plot.labelX = \cf2 nil\cf0 ; \cf5 //"frames";\cf0 \
\cf2 GUI\cf0 .skin.plot.labelY = \cf2 nil\cf0 ; \cf5 //"val";
\f0\fs20 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 \
\cf5 //// display the window + run "app"\cf0 \
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf0 ~gui[\cf3 \\topWindow\cf0 ].front;\
\
\pard\pardeftab560\ql\qnatural
\cf0 )\
}